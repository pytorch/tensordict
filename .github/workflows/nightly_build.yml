# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Push Binary Nightly

on:
  workflow_call:
    secrets:
#      AWS_PYTORCH_UPLOADER_ACCESS_KEY_ID:
#        required: true
#      AWS_PYTORCH_UPLOADER_SECRET_ACCESS_KEY:
#        required: true
      PYPI_TOKEN:
        required: false
  # run every day at 11:15am
  schedule:
    - cron:  '15 11 * * *'
  # or manually trigger it
  workflow_dispatch:
  push:
    branches:
      - "nightly"


jobs:
  build-wheel:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python:
          - version: "3.7"
            tag: py37
          - version: "3.8"
            tag: py38
          - version: "3.9"
            tag: py39
          - version: "3.10"
            tag: py310
    steps:
      - name: Checkout tensordict
        uses: actions/checkout@v2
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: build_binary
          python-version: ${{ matrix.python.version }}
      - name: Install PyTorch nightly
        run: python -m pip install --pre torch --extra-index-url https://download.pytorch.org/whl/nightly/cpu
      - name: Build TensorDict Nightly
        run: |
          rm -r dist || true
          python -m pip install wheel
          python setup.py bdist_wheel \
            --package_name tensordict-nightly \
            --python-tag=${{ matrix.python.tag }}
      - name: Upload wheel for the test-wheel job
        uses: actions/upload-artifact@v2
        with:
          name: tensordict-nightly-${{ matrix.python.version }}.whl
          path: dist/*.whl

  test-wheel:
    needs: build-wheel
    strategy:
      matrix:
        os: ["ubuntu-20.04", "macos-latest"]
        python:
          - version: "3.7"
            tag: py37
          - version: "3.8"
            tag: py38
          - version: "3.9"
            tag: py39
          - version: "3.10"
            tag: py310
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout TensorDict
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python.version }}
          architecture: x64
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      - name: Install PyTorch Nightly
        run: |
          python -m pip install --pre torch --extra-index-url https://download.pytorch.org/whl/nightly/cpu
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      - name: Install test dependencies
        run: |
          python -m pip install numpy pytest --no-cache-dir
      - name: Download built wheels
        uses: actions/download-artifact@v2
        with:
          name: tensordict-nightly-${{ matrix.python.version }}.whl
          path: /tmp/wheels
      - name: Install built wheels
        run: |
          python -m pip install /tmp/wheels/*
      - name: Log version string
        run: |
          # Avoid ambiguity of "import tensordict" by deleting the source files.
          rm -rf tensordict/
          python -c "import tensordict; print(tensordict.__version__)"
      - name: Run tests
        run: |
          set -e
          export IN_CI=1
          mkdir test-reports
          python -m torch.utils.collect_env
          python -c "import tensordict; print(tensordict.__version__);from tensordict import TensorDict"
          EXIT_STATUS=0
          pytest test/smoke_test.py -v --durations 20
          exit $EXIT_STATUS

  upload-wheel:
    needs: test-wheel
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python:
          - version: "3.7"
            tag: py37
          - version: "3.8"
            tag: py39
          - version: "3.9"
            tag: py39
          - version: "3.10"
            tag: py310
    steps:
      - name: Checkout TensorDict
        uses: actions/checkout@v2
      - name: Download built wheels
        uses: actions/download-artifact@v2
        with:
          name: tensordict-nightly-${{ matrix.python.version }}.whl
          path: /tmp/wheels
      - name: Push TensorDict Binary to PYPI
        env:
            PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m pip install twine
          python -m twine upload \
              --username __token__ \
              --password "$PYPI_TOKEN" \
              --skip-existing \
              /tmp/wheels/tensordict_nightly-*.whl \
              --verbose
